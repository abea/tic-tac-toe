"use strict";function _toConsumableArray(a){if(Array.isArray(a)){for(var b=0,c=Array(a.length);b<a.length;b++)c[b]=a[b];return c}return Array.from(a)}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function updateIntro(a){switch(a){case 0:intro.textContent=instructions[1];break;case 1:intro.textContent=instructions[2];break;case 2:intro.textContent=instructions[3]}}function startGame(){spaces.forEach(function(a){a.removeAttribute("disabled")}),resetter.removeAttribute("disabled"),starter.setAttribute("disabled","true"),player1=new Player("one","âœ•"),player2=new Player("two","â—‹"),updateIntro(turn)}function resetGame(){spaces.forEach(function(a){a.setAttribute("disabled","true"),a.innerHTML=""}),player1.moves=[],player2.moves=[],winner=void 0,turn=0,message.textContent="",message.classList.add("is-hidden"),message.classList.remove("is-good"),intro.textContent=instructions[0],starter.removeAttribute("disabled"),resetter.setAttribute("disabled","true")}function gameOver(){message.textContent="Game Over",message.classList.remove("is-hidden")}function triggerWin(a){winner=a,message.textContent="Player "+a.name+" wins!",message.classList.add("is-good"),message.classList.remove("is-hidden"),spaces.forEach(function(a){a.setAttribute("disabled","")})}function setWins(a){for(var b=1;b<a+1;b+=1)diagWin1.push({row:b,col:b}),diagWin2.push({row:a-(b-1),col:b}),rowOrCol["row"+b]=0,rowOrCol["col"+b]=0}function inDiagonalWin(a,b){var c=a.findIndex(function(a){return a.row===parseInt(b.row,10)}),d=a.findIndex(function(a){return a.col===parseInt(b.col,10)});return c>-1&&d===c}function winCheck(a,b){var c=[].concat(_toConsumableArray(b)),d=Object.assign({},rowOrCol),e=0,f=0;c.forEach(function(b){var c="row"+b.row,g="col"+b.col;d[c]+=1,d[g]+=1,d[c]===gridLength||d[g]===gridLength?triggerWin(a):(inDiagonalWin(diagWin1,b)||inDiagonalWin(diagWin2,b))&&(inDiagonalWin(diagWin1,b)&&(e+=1),inDiagonalWin(diagWin2,b)&&(f+=1))}),e!==gridLength&&f!==gridLength||triggerWin(a)}function makeMove(){var a=void 0,b={row:this.dataset.row,col:this.dataset.col};turn+=1,updateIntro(turn),a=turn%2!=0?player1:player2,a.moves.push(b),this.textContent=a.symbol.toUpperCase(),this.setAttribute("disabled","true"),winCheck(a,a.moves),turn!==spaces.length||winner||gameOver()}var turn=0,player1={},player2={},winner=void 0,starter=document.getElementById("starter"),resetter=document.getElementById("reset"),spaces=document.querySelectorAll(".board__space"),message=document.querySelector(".board__message"),intro=document.getElementById("intro"),gridLength=Math.sqrt(spaces.length),instructions=['Your goal is to fill a full row, column or major diagonal with your marker. Press "Start" to start the game.',"Player one, click a space in the grid to make your mark.","Player two, it's your turn. click a space to make your mark.","Continue going back and forth until someone wins(ðŸ’¥) or all spaces are full."];intro.textContent=instructions[0];var Player=function a(b,c){_classCallCheck(this,a),this.name=b,this.symbol=c,this.moves=[]};starter.addEventListener("click",function(){startGame()}),resetter.addEventListener("click",function(){resetGame()});var diagWin1=[],diagWin2=[],rowOrCol={};setWins(gridLength),spaces.forEach(function(a){a.addEventListener("click",makeMove)});